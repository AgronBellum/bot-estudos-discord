import os
import discord
from discord.ext import commands
from groq import Groq
from dotenv import load_dotenv
from flask import Flask
import threading

# Carregar vari√°veis de ambiente
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# Configurar cliente Groq
groq_client = Groq(api_key=GROQ_API_KEY)

# Configurar intents do Discord
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Hist√≥rico de mensagens
conversation_history = []

# Prompt fixo para especializa√ß√£o do bot
BASE_PROMPT = """
Voc√™ √© LeDe_concursos, um especialista em concursos p√∫blicos.
- Responda de forma did√°tica, clara e aprofundada.
- Domine as principais bancas: CESPE, FGV, FCC, Quadrix e FURG.
- Para a FURG, tenha aten√ß√£o especial √†s provas de T√©cnico Administrativo e T√©cnico em Assuntos Educacionais.
- D√™ dicas pr√°ticas de resolu√ß√£o, chame aten√ß√£o para pegadinhas e diferen√ßas sutis que confundem candidatos.
- Seja humano, atencioso e motivador.
"""

# Evento de inicializa√ß√£o
@bot.event
async def on_ready():
    print(f"ü§ñ Bot {bot.user} est√° online!")

# Evento para responder quando for mencionado
@bot.event
async def on_message(message):
    if message.author.bot:
        return
    
    if bot.user.mentioned_in(message):
        user_input = message.content.replace(f"<@{bot.user.id}>", "").strip()

        # Salvar hist√≥rico (√∫ltimas 10 mensagens)
        conversation_history.append({"role": "user", "content": user_input})
        if len(conversation_history) > 10:
            conversation_history.pop(0)

        # Montar mensagens para enviar ao Groq
        messages = [{"role": "system", "content": BASE_PROMPT}] + conversation_history

        try:
            # Requisi√ß√£o ao Groq
            response = groq_client.chat.completions.create(
                model="llama3-70b-8192",
                messages=messages,
                max_tokens=500,
            )

            # üî• CORRE√á√ÉO AQUI
            reply = response.choices[0].message.content
            await message.channel.send(reply)

        except Exception as e:
            await message.channel.send(f"‚ö†Ô∏è Ocorreu um erro ao gerar a resposta: {str(e)}")

    await bot.process_commands(message)

# --- Servidor Flask fake s√≥ pra Render n√£o matar ---
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot LeDe_concursos rodando!"

def run_web():
    app.run(host="0.0.0.0", port=10000)

threading.Thread(target=run_web).start()

# Rodar bot
bot.run(DISCORD_TOKEN)
