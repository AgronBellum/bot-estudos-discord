# bot.py - Vers√£o Consolidada e Corrigida
import os
import re
import json
import random
import asyncio
import logging
import threading
import unicodedata
from typing import Dict, Any, List, Tuple

import discord
from discord.ext import commands
from groq import Groq
from dotenv import load_dotenv
from flask import Flask

# =============================
# Configura√ß√£o Inicial
# =============================
# Logging
logging.basicConfig(
    filename='bot_errors.log',
    level=logging.ERROR,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

def log_error(error: Exception, context: str = ""):
    logging.error(f"{context} - {type(error).__name__}: {str(error)}", exc_info=True)

# Flask Keep-Alive
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot LeDe_concursos rodando!"

def run_web():
    try:
        app.run(host='0.0.0.0', port=10000, use_reloader=False)
    except OSError as e:
        if 'Address already in use' in str(e):
            print("‚ö†Ô∏è Servidor Flask j√° em execu√ß√£o")
        else:
            raise

threading.Thread(target=run_web, daemon=True).start()

# =============================
# Vari√°veis de Ambiente
# =============================
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# Valida de maneira mais robusta (comprimento m√≠nimo)
if not DISCORD_TOKEN or len(DISCORD_TOKEN) < 50:
    raise RuntimeError("Token do Discord inv√°lido ou faltando (verifique .env)")
if not GROQ_API_KEY or len(GROQ_API_KEY) < 30:
    raise RuntimeError("Token Groq inv√°lido ou faltando (verifique .env)")

# =============================
# Constantes e Configura√ß√µes
# =============================
BANCAS_VALIDAS = {
    "CESPE", "CEBRASPE", "FGV", "FCC", "QUADRIX", "FURG",
    "VUNESP", "IBFC", "IDECAN", "IADES", "CESGRANRIO",
    "AOCP", "FUNRIO", "OBJETIVA", "CPNU"
}

GROQ_MODEL = "llama3-70b-8192"
groq_client = Groq(api_key=GROQ_API_KEY)
groq_semaphore = asyncio.Semaphore(5)  # Limite de chamadas simult√¢neas

# =============================
# Discord Bot
# =============================
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Hist√≥rico simples para men√ß√µes
conversation_history: List[Dict[str, str]] = []

# =============================
# Base de Conhecimento
# =============================
BASE_PROMPT = """
# üéì Identidade
Voc√™ √© **LeDe_concursos**, um assistente especializado em concursos com personalidade de **professor veterano**.
Estilo: üìò Did√°tico | üéØ Adapt√°vel por banca | üí° Memor√°vel (analogias e humor moderado).

# üèõÔ∏è Estilos por Banca
- CESPE/CEBRASPE: Ca√ßador de pegadinhas (cuidado com trocas "podem/devem"; certo/errado).
- FGV: Analista de detalhes (interpreta√ß√£o, letra de lei contextualizada).
- FCC: Professor tradicional (defini√ß√µes precisas, 5 alternativas).
- Quadrix: Objetivo, cuidado com "N√ÉO/EXCETO".
- FURG: Institucional (Lei 8.112/90, Lei 9.784/99, Regimento; linguagem direta).
- Outras (VUNESP, IBFC, IDECAN, IADES, CESGRANRIO, FUNRIO, OBJETIVA, AOCP, CPNu etc.) siga o padr√£o real (geralmente 5 alternativas A‚ÄìE).

# Regras gerais de resposta
- Sempre puxe o papo para os estudos. Se a mensagem for gen√©rica ("oi"), responda simp√°tico e pergunte: "Qual banca/tema voc√™ quer focar hoje?"
- Nunca invente. Se n√£o tiver certeza, diga e sugira onde verificar (lei seca, edital, sites de quest√µes).
- Quest√µes de m√∫ltipla escolha: **5 alternativas (A‚ÄìE)** salvo banca explicitamente diferente.
- Sempre que citar norma: d√™ refer√™ncia (ex.: Art. 20 da Lei 8.112/90) e traduza em linguagem simples.
"""

piadas_concursadas = [
    "üìÖ Por que o concurseiro n√£o usa rel√≥gio? Porque j√° vive no 'tempo regulamentar' do edital!",
    "üìñ Como se chama quem estuda a 8.112/90 ao contr√°rio? Um 211.8 oit√≥l!"
]

server_structure = {
    "üèõÔ∏è Gerais": [
        "üì¢-avisos",
        "üí¨-bate-papo",
        "üìé-links-√∫teis"
    ],
    "üìö Disciplinas B√°sicas": [
        "portugu√™s",
        "racioc√≠nio-l√≥gico",
        "matem√°tica",
        "inform√°tica",
        "direito-constitucional",
        "direito-administrativo",
        "direito-penal",
        "direito-processual-penal",
        "direito-civil",
        "direito-processual-civil",
        "direitos-humanos",
        "√©tica-no-servi√ßo-p√∫blico",
        "atualidades"
    ],
    "üìù Simulados": [
        "instru√ß√µes",
        "simulados-cespe",
        "simulados-fgv",
        "simulados-fcc",
        "simulados-quadrix",
        "simulados-furg",
        "simulados-vunesp",
        "simulados-ibfc",
        "simulados-idecan",
        "simulados-iades",
        "simulados-cesgranrio",
        "simulados-aocp",
        "simulados-cpnu",
        "simulados-outros"
    ],
    "üìä Bancas": [
        "cespe-cebraspe",
        "fgv",
        "fcc",
        "quadrix",
        "furg",
        "vunesp",
        "ibfc",
        "idecan",
        "iades",
        "cesgranrio",
        "aocp",
        "funrio",
        "objetiva",
        "cpnu",
        "outros"
    ],
    "üéØ Concursos Espec√≠ficos": [
        "trf4-2025",
        "tjrs-2025",
        "pf-agente",
        "prf-2026"
    ],
    "üòÇ Motiva√ß√£o": [
        "frases-motivacionais",
        "piadas-concurseiras"
    ]
}

# =============================
# Fun√ß√µes Utilit√°rias
# =============================
def slugify_channel_name(name: str) -> str:
    """Converte nomes para formato v√°lido no Discord."""
    nfkd = unicodedata.normalize("NFKD", name)
    s = "".join(ch for ch in nfkd if not unicodedata.combining(ch))
    s = s.lower()
    s = re.sub(r"\s+", "-", s)
    s = re.sub(r"[^a-z0-9\-]", "-", s)
    s = re.sub(r"-{2,}", "-", s)
    s = s.strip("-")
    return s or "canal"

def normalizar_banca(banca: str) -> str:
    """Padroniza o nome da banca."""
    banca = banca.upper().strip()
    if banca in {"CESPE", "CEBRASPE"}:
        return "CESPE/CEBRASPE"
    return banca

def validar_banca(banca: str) -> bool:
    """Verifica se a banca √© suportada."""
    b = normalizar_banca(banca)
    base = { "CESPE/CEBRASPE" if x in {"CESPE","CEBRASPE"} else x for x in BANCAS_VALIDAS }
    return b in base

def validar_tema(tema: str) -> bool:
    """Valida√ß√£o b√°sica do tema."""
    tema = (tema or "").strip()
    return 2 <= len(tema) <= 100

async def chat_groq(messages: List[Dict[str, str]], max_tokens: int = 700, temperature: float = 0.6) -> str:
    """Chamada √† API Groq com limita√ß√£o de concorr√™ncia."""
    async with groq_semaphore:
        try:
            resp = await asyncio.to_thread(
                groq_client.chat.completions.create,
                model=GROQ_MODEL,
                messages=messages,
                temperature=temperature,
                max_tokens=max_tokens
            )
            return resp.choices[0].message.content
        except Exception as e:
            log_error(e, "chat_groq")
            raise

def extract_json(text: str) -> Any:
    """Extrai JSON de blocos de c√≥digo ou texto puro."""
    patterns = [
        r"```json\s*(\{.*?\})\s*```",
        r"```+\s*(\{.*?\})\s*```+"
    ]
    for pattern in patterns:
        match = re.search(pattern, text, flags=re.S | re.I)
        if match:
            try:
                return json.loads(match.group(1))
            except json.JSONDecodeError:
                continue
    return json.loads(text)

# =============================
# Simulado - Gera√ß√£o
# =============================
def build_simulado_system_prompt() -> str:
    return BASE_PROMPT + """
## Agora voc√™ ir√° GERAR SIMULADO EM FORMATO JSON PURO.
Regras IMPORTANTES:
- Sempre 5 quest√µes.
- Se a banca n√£o for CERTO/ERRADO (CESPE), use m√∫ltipla escolha com 5 alternativas (A‚ÄìE).
- Para CESPE/CEBRASPE: formato Certo/Errado, sem alternativas A‚ÄìE.
- Cada quest√£o deve ter: enunciado, opcoes (quando aplic√°vel), correta e comentario.
- Nunca quebre o JSON. N√£o adicione texto fora do JSON.
- Estrutura esperada:
{"banca":"...", "formato":"multipla_escolha|certo_errado", "tema":"...", "questoes":[
  {"enunciado":"...", "opcoes":["A) ...","B) ...","C) ...","D) ...","E) ..."]|"opcoes":["Certo","Errado"], "correta":"A|B|C|D|E|Certo|Errado", "comentario":"..."},
  ...
]}
"""

async def gerar_simulado_json(banca: str, tema: str) -> Dict[str, Any]:
    try:
        user_prompt = f"Gerar simulado para {banca} sobre {tema}. Responda APENAS com JSON v√°lido."
        messages = [
            {"role": "system", "content": build_simulado_system_prompt()},
            {"role": "user", "content": user_prompt}
        ]
        raw = await chat_groq(messages, 1500, 0.4)
        return extract_json(raw)
    except Exception as e:
        log_error(e, "gerar_simulado_json")
        raise

def normalize_simulado(data: Dict[str, Any]) -> Dict[str, Any]:
    """Garante estrutura consistente do simulado."""
    banca = normalizar_banca((data.get("banca") or "").upper())
    formato = data.get("formato", "multipla_escolha")
    tema = data.get("tema", "geral")
    questoes = data.get("questoes", [])[:5]

    # Preenche com quest√µes padr√£o se necess√°rio
    while len(questoes) < 5:
        questoes.append({
            "enunciado": "Quest√£o adicional (placeholder).",
            "opcoes": ["Certo", "Errado"] if formato == "certo_errado" else ["A) ‚Äî", "B) ‚Äî", "C) ‚Äî", "D) ‚Äî", "E) ‚Äî"],
            "correta": "Certo" if formato == "certo_errado" else "A",
            "comentario": "Coment√°rio n√£o fornecido pela IA."
        })

    # Normaliza alternativas e campos
    for q in questoes:
        q["enunciado"] = str(q.get("enunciado", "Sem enunciado")).strip()
        if formato == "certo_errado":
            q["opcoes"] = ["Certo", "Errado"]
            q["correta"] = "Certo" if q.get("correta") not in ["Certo", "Errado"] else q["correta"]
        else:
            ops = [re.sub(r"^[A-Ea-e]\)\s*", "", str(s)).strip() for s in (q.get("opcoes") or [])][:5]
            while len(ops) < 5:
                ops.append("‚Äî")
            q["opcoes"] = [f"{chr(65+i)}) {ops[i]}" for i in range(5)]
            q["correta"] = (q.get("correta") or "A").upper()
            if q["correta"] not in list("ABCDE"):
                q["correta"] = "A"
        if not q.get("comentario"):
            q["comentario"] = "Coment√°rio n√£o fornecido pela IA."

    return {
        "banca": banca,
        "formato": formato,
        "tema": tema,
        "questoes": questoes
    }

def make_question_embed(idx: int, total: int, banca: str, tema: str, q: Dict[str, Any]) -> discord.Embed:
    """Cria embed para quest√µes."""
    embed = discord.Embed(
        title=f"üìù Simulado {banca} ‚Äî Q{idx+1}/{total}",
        description=f"**Tema:** {tema}\n\n**Enunciado:** {q['enunciado']}",
        color=discord.Color.blurple()
    )
    if q.get("opcoes"):
        if isinstance(q["opcoes"], list):
            opts_text = "\n".join(q["opcoes"])
        else:
            opts_text = str(q["opcoes"])
        embed.add_field(name="Alternativas", value=opts_text, inline=False)
    embed.set_footer(text="Clique nos bot√µes para responder.")
    return embed

# =============================
# Sess√µes de Simulado
# =============================
# chave: user_id (str)  ‚Üí sess√£o
sim_sessions: Dict[str, Dict[str, Any]] = {}

# =============================
# UI: Bot√µes e Views (√∫nicas)
# =============================
class AnswerButton(discord.ui.Button):
    def __init__(self, label: str, custom_id: str):
        # label mostrado no bot√£o; custom_id √© a letra (A..E) ou "CERTO"/"ERRADO"
        super().__init__(label=label, style=discord.ButtonStyle.primary, custom_id=custom_id)

    async def callback(self, interaction: discord.Interaction):
        user_id = str(interaction.user.id)
        session = sim_sessions.get(user_id)

        if not session or session["current"] >= len(session["questions"]):
            await interaction.response.send_message("‚ö†Ô∏è Sess√£o n√£o encontrada ou expirada.", ephemeral=True)
            return

        idx = session["current"]
        q = session["questions"][idx]
        formato = session["formato"]

        # Resposta do usu√°rio
        user_answer = self.custom_id  # "A".."E" ou "Certo"/"Errado"
        correct = q["correta"]

        # Mapeia r√≥tulos completos
        if formato == "certo_errado":
            user_label = user_answer
            correct_label = correct
            is_correct = (user_answer == correct)
        else:
            # encontra "A) texto"
            user_label = next((opt for opt in q["opcoes"] if opt.startswith(f"{user_answer})")), f"{user_answer}) [n√£o encontrada]")
            correct_label = next((opt for opt in q["opcoes"] if opt.startswith(f"{correct})")), f"{correct}) [n√£o encontrada]")
            is_correct = (user_answer.upper() == correct.upper())

        # Registra
        session["answers"].append({
            "idx": idx,
            "user": user_answer,
            "user_label": user_label,
            "correct": correct,
            "correct_label": correct_label,
            "ok": is_correct,
            "comentario": q.get("comentario", "Sem coment√°rio dispon√≠vel")
        })

        # Feedback imediato
        if is_correct:
            await interaction.response.send_message("‚úÖ Resposta correta!", ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ùå Resposta incorreta. Gabarito: {correct_label}", ephemeral=True)

        # Pr√≥xima
        session["current"] += 1
        if session["current"] < len(session["questions"]):
            await enviar_proxima_questao(interaction, user_id)
        else:
            await finalizar_simulado(interaction, user_id)

class QuestionView(discord.ui.View):
    def __init__(self, question: Dict[str, Any], formato: str):
        super().__init__(timeout=300)
        if formato == "certo_errado":
            self.add_item(AnswerButton(label="Certo", custom_id="Certo"))
            self.add_item(AnswerButton(label="Errado", custom_id="Errado"))
        else:
            # Para m√∫ltipla escolha, bot√µes com letras A‚ÄìE
            for letter in "ABCDE":
                self.add_item(AnswerButton(label=letter, custom_id=letter))

async def enviar_proxima_questao(interaction: discord.Interaction, user_id: str):
    session = sim_sessions.get(user_id)
    if not session:
        return
    idx = session["current"]
    q = session["questions"][idx]
    embed = make_question_embed(idx, len(session["questions"]), session["banca"], session["tema"], q)
    view = QuestionView(q, session["formato"])
    await interaction.channel.send(embed=embed, view=view)

async def finalizar_simulado(interaction: discord.Interaction, user_id: str):
    session = sim_sessions.get(user_id)
    if not session:
        return

    total = len(session["questions"])
    acertos = sum(1 for a in session["answers"] if a["ok"])
    perc = (acertos / total) * 100 if total else 0.0

    embed = discord.Embed(
        title=f"üìä Resultado Final - {session['banca']}",
        description=(f"**Tema:** {session['tema']}\n"
                     f"**Acertos:** {acertos}/{total} ({perc:.1f}%)\n"
                     f"**N√≠vel:** {'üëç Bom desempenho' if perc >= 70 else 'üü† Mediano' if perc >= 50 else 'üî¥ Precisa refor√ßar'}"),
        color=discord.Color.green() if perc >= 70 else discord.Color.orange() if perc >= 50 else discord.Color.red()
    )

    for i, q in enumerate(session["questions"]):
        if i >= 25:  # limite do Discord
            embed.add_field(name="‚Ä¶", value="*Muitas quest√µes para detalhar em um √∫nico embed.*", inline=False)
            break
        resp = session["answers"][i]
        resumo_enunciado = (q["enunciado"][:150] + "...") if len(q["enunciado"]) > 150 else q["enunciado"]
        bloco = "\n".join([
            f"**Enunciado:** {resumo_enunciado}",
            f"**Sua resposta:** {resp['user_label']}",
            f"**Gabarito:** {resp['correct_label']}",
            f"**Explica√ß√£o:** {resp.get('comentario','Sem coment√°rio')}"
        ])
        status = "‚úÖ" if resp["ok"] else "‚ùå"
        embed.add_field(name=f"Quest√£o {i+1} {status}", value=bloco, inline=False)

    embed.set_footer(text="Revise os coment√°rios para consolidar seu aprendizado! üìö")
    await interaction.channel.send(embed=embed)

    # Encerra sess√£o
    sim_sessions.pop(user_id, None)

# =============================
# Eventos
# =============================
@bot.event
async def on_ready():
    print(f"ü§ñ {bot.user.name} est√° online! Modo: Professor Concurseiro")

@bot.event
async def on_message(message: discord.Message):
    if message.author.bot:
        return

    # Resposta quando for mencionado @bot
    if bot.user.mentioned_in(message):
        user_input = message.content.replace(f"<@{bot.user.id}>", "").strip()
        conversation_history.append({"role": "user", "content": user_input})
        if len(conversation_history) > 6:
            conversation_history.pop(0)

        try:
            msgs = [{"role": "system", "content": BASE_PROMPT}, *conversation_history]
            reply = await chat_groq(msgs, 500, 0.6)
            if random.random() < 0.1:
                reply += f"\n\n{random.choice(piadas_concursadas)}"
            await message.channel.send(reply)
        except Exception as e:
            log_error(e, "on_message")
            await message.channel.send("üí• Erro interno! J√° registrei aqui no console.")

    await bot.process_commands(message)

# =============================
# Comandos
# =============================
@bot.command()
async def piada(ctx: commands.Context):
    """Envia uma piada de concurseiro."""
    await ctx.send(random.choice(piadas_concursadas))

@bot.command()
@commands.has_permissions(administrator=True)
async def setup(ctx: commands.Context):
    """Configura a estrutura do servidor."""
    guild = ctx.guild
    if not guild:
        return await ctx.send("‚ö†Ô∏è Rode este comando dentro de um servidor.")
    created = 0
    for category_name, channels in server_structure.items():
        category = discord.utils.get(guild.categories, name=category_name)
        if not category:
            category = await guild.create_category(category_name)
        for original_name in channels:
            slug = slugify_channel_name(original_name)
            existing = discord.utils.get(category.channels, name=slug)
            if not existing:
                await guild.create_text_channel(slug, category=category)
                created += 1
    await ctx.send(f"‚úÖ Estrutura criada! ({created} canais novos)")

@bot.command(name="simulado")
async def simulado_cmd(ctx: commands.Context, banca: str, *, tema: str = "geral"):
    """Inicia um simulado personalizado.
    Uso: !simulado FGV Direito Administrativo
    Para CESPE/CEBRASPE o formato √© Certo/Errado. Demais bancas: A‚ÄìE.
    """
    try:
        # Valida√ß√£o
        if not validar_banca(banca):
            bancas = ", ".join(sorted(BANCAS_VALIDAS))
            return await ctx.send(
                f"‚ö†Ô∏è Banca inv√°lida! Escolha entre:\n{bancas}\n"
                f"Exemplo: `!simulado CESPE Direito Constitucional`"
            )
        if not validar_tema(tema):
            return await ctx.send("‚ö†Ô∏è Tema deve ter 2-100 caracteres. Ex: `Direito Administrativo`")

        user_id = str(ctx.author.id)
        if user_id in sim_sessions:
            return await ctx.send("‚ö†Ô∏è Voc√™ j√° tem um simulado em andamento. Use `!cancelar` para abortar.")

        # Feedback
        msg = await ctx.send("‚è≥ Gerando seu simulado...")

        try:
            banca_norm = normalizar_banca(banca)
            raw_data = await gerar_simulado_json(banca_norm, tema)
            data = normalize_simulado(raw_data)
        except json.JSONDecodeError:
            await msg.delete()
            return await ctx.send("üî¥ Erro: N√£o consegui formatar o simulado. Tente um tema mais espec√≠fico.")
        except Exception as e:
            await msg.delete()
            log_error(e, "simulado_json")
            return await ctx.send("‚è≥ Servidor de IA sobrecarregado. Tente novamente em 1 minuto.")

        # Inicia sess√£o
        sim_sessions[user_id] = {
            "banca": data["banca"],
            "formato": data["formato"],
            "tema": data["tema"],
            "questions": data["questoes"],
            "current": 0,
            "answers": [],
            "start_time": discord.utils.utcnow()
        }

        # Primeira quest√£o
        q0 = data["questoes"][0]
        embed = make_question_embed(0, len(data["questoes"]), data["banca"], data["tema"], q0)
        view = QuestionView(q0, data["formato"])

        await msg.delete()
        await ctx.send(embed=embed, view=view)

    except Exception as e:
        log_error(e, "comando_simulado")
        await ctx.send("üí• Falha cr√≠tica ao criar simulado. Os desenvolvedores foram notificados.")

@bot.command(name="resultado")
async def resultado(ctx: commands.Context):
    """Mostra o resultado parcial/final do simulado atual."""
    user_id = str(ctx.author.id)
    session = sim_sessions.get(user_id)
    if not session:
        return await ctx.send("‚ö†Ô∏è Voc√™ n√£o tem simulado em andamento. Use `!simulado` para come√ßar.")

    total = len(session["questions"])
    if not session["answers"]:
        return await ctx.send("‚ö†Ô∏è Voc√™ ainda n√£o respondeu nenhuma quest√£o.")
    acertos = sum(1 for a in session["answers"] if a["ok"])
    perc = (acertos / total) * 100 if total else 0.0

    await ctx.send(f"üìä Parcial: **{acertos}/{total}** ({perc:.1f}%). Para encerrar automaticamente, responda todas as quest√µes.")

@bot.command(name="cancelar")
async def cancelar_simulado(ctx: commands.Context):
    """Cancela o simulado atual."""
    user_id = str(ctx.author.id)
    if user_id in sim_sessions:
        sim_sessions.pop(user_id)
        await ctx.send("‚ùå Simulado cancelado.")
    else:
        await ctx.send("‚ö†Ô∏è Voc√™ n√£o tem simulado em andamento.")

# =============================
# Tratamento de Erros Global
# =============================
@bot.event
async def on_command_error(ctx: commands.Context, error: commands.CommandError):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("‚ùå Comando desconhecido! Tente: `!simulado`, `!piada`, `!setup`, `!resultado`, `!cancelar`.")
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚õî Voc√™ n√£o tem permiss√£o para executar este comando.")
    elif isinstance(error, commands.MissingRequiredArgument):
        cmd = ctx.command.name if ctx.command else "simulado"
        await ctx.send(f"‚ö†Ô∏è Argumento faltando! Exemplo: `!{cmd} CESPE Direito Constitucional`")
    else:
        log_error(error, "on_command_error")
        await ctx.send("üî¥ Erro interno. J√° registrei os detalhes.")

# =============================
# Inicializa√ß√£o
# =============================
if __name__ == "__main__":
    try:
        bot.run(DISCORD_TOKEN)
    except Exception as e:
        log_error(e, "bot_startup")
        print(f"‚ùå Falha ao iniciar bot: {e}")
        raise
